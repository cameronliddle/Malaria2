{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOwS/4RWZil+vCyVro7YsXm",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/cameronliddle/Malaria2/blob/main/Trying%20Out%20code\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 472
        },
        "id": "WdoEHekU-hqR",
        "outputId": "0eadfc65-5c6c-4fca-cece-eedfbdf51d3b"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "def triangular_membership_function(x, a, b, c):\n",
        "    return max(0, min((x - a) / (b - a), (c - x) / (c - b)))\n",
        "\n",
        "# Define the parameters for the triangular membership function for \"Mild\" Body Temperature\n",
        "a_mild = 36  # Lower bound\n",
        "b_mild = 37  # Peak\n",
        "c_mild = 38  # Upper bound\n",
        "\n",
        "# Generate x values\n",
        "x_values = np.linspace(35, 39, 1000)\n",
        "\n",
        "# Calculate the membership values for \"Mild\" Body Temperature\n",
        "membership_values_mild = [triangular_membership_function(x, a_mild, b_mild, c_mild) for x in x_values]\n",
        "\n",
        "# Plot the membership function\n",
        "plt.plot(x_values, membership_values_mild, label='Mild')\n",
        "plt.title('Triangular Membership Function for Body Temperature (Mild)')\n",
        "plt.xlabel('Body Temperature')\n",
        "plt.ylabel('Membership Value')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def apply_rule(rule, fuzzy_values):\n",
        "    # Given a rule and fuzzy input values, apply the rule and calculate the fuzzy output value\n",
        "    # You need to implement this based on your specific rule structure\n",
        "    pass\n",
        "\n",
        "def inference(rule_matrix, fuzzy_input_values):\n",
        "    # Apply each rule to the fuzzy input values and accumulate the results\n",
        "    fuzzy_output_values = []\n",
        "\n",
        "    for rule in rule_matrix:\n",
        "        fuzzy_output_value = apply_rule(rule, fuzzy_input_values)\n",
        "        fuzzy_output_values.append(fuzzy_output_value)\n",
        "\n",
        "    return fuzzy_output_values\n",
        "\n",
        "# Example usage\n",
        "rule_matrix = [\n",
        "    # Your rules here\n",
        "]\n",
        "\n",
        "# Assuming you have obtained fuzzy_input_values from the fuzzification step\n",
        "fuzzy_input_values = {\n",
        "    'Bt': 37.5,\n",
        "    'Ch': 0.2,\n",
        "    # Other symptoms\n",
        "}\n",
        "\n",
        "# Apply inference\n",
        "fuzzy_output_values = inference(rule_matrix, fuzzy_input_values)\n",
        "\n",
        "# Now you have a list of fuzzy output values, and you can proceed to the next step (defuzzification)\n"
      ],
      "metadata": {
        "id": "v5Yawnl1_W3D"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "class Defuzzification:\n",
        "    def __init__(self, fuzzification):\n",
        "        # We need the Fuzzification object to find the fuzzy value of each discrete point on the x-axis in the health chart\n",
        "        self.fuzzification = fuzzification\n",
        "\n",
        "    def get_center_of_mass(self, health):\n",
        "        # 1- Discretization\n",
        "        points = np.linspace(0, 4, 1000)\n",
        "        # 2- Define two variables: one for the numerator in the center of mass formula (sigma_mu_x)\n",
        "        # and one for the denominator of that formula (sigma_mu)\n",
        "        sigma_mu_x = 0.0\n",
        "        sigma_mu = 0.0\n",
        "        # 3- For finding the area that we should calculate its center of mass:\n",
        "        # we should calculate the minimum between inference output and the fuzzy value of the fuzzification part\n",
        "        for i in range(len(points)):\n",
        "            fuzzy_values_of_point = self.fuzzification.get_fuzzy_value('health', points[i])\n",
        "            healthy = min(health['healthy'], fuzzy_values_of_point['healthy'])\n",
        "            sick_1 = min(health['sick_1'], fuzzy_values_of_point['sick_1'])\n",
        "            sick_2 = min(health['sick_2'], fuzzy_values_of_point['sick_2'])\n",
        "            sick_3 = min(health['sick_3'], fuzzy_values_of_point['sick_3'])\n",
        "            sick_4 = min(health['sick_4'], fuzzy_values_of_point['sick_4'])\n",
        "            overall_health = max(healthy, sick_1, sick_2, sick_3, sick_4)\n",
        "            # 4- Update sigma_mu_x and sigma_mu point by point\n",
        "            sigma_mu_x += overall_health * points[i]\n",
        "            sigma_mu += overall_health\n",
        "\n",
        "        # 5- Check if sigma_mu is zero\n",
        "        if sigma_mu == 0:\n",
        "            return 0\n",
        "        # 6- If sigma_mu is not zero, calculate the center of mass value\n",
        "        else:\n",
        "            return sigma_mu_x / sigma_mu\n",
        "\n",
        "    def get_health_status(self, inference_result):\n",
        "        health_status = []\n",
        "        center_of_mass = self.get_center_of_mass(inference_result)\n",
        "        if center_of_mass < 1.78:\n",
        "            health_status.append(\"healthy\")\n",
        "        if 1 <= center_of_mass <= 2.51:\n",
        "            health_status.append(\"sick1\")\n",
        "        if 1.78 <= center_of_mass <= 3.25:\n",
        "            health_status.append(\"sick2\")\n",
        "        if 1.5 <= center_of_mass <= 4.5:\n",
        "            health_status.append(\"sick3\")\n",
        "        if 3.25 < center_of_mass:\n",
        "            health_status.append(\"sick4\")\n",
        "\n",
        "        return ' & '.join(health_status) + \": \" + str(center_of_mass)\n"
      ],
      "metadata": {
        "id": "OTRUdrH0ARgo"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "class Fuzzification:\n",
        "    # Define fuzzy sets for input variables\n",
        "    def __init__(self):\n",
        "        self.fuzzy_sets = {\n",
        "            'Bt': {\n",
        "                'Mi': [(0, 1), (37, 1), (38, 0)],\n",
        "                'Mo': [(37, 0), (38, 1), (39, 0)],\n",
        "                'Se': [(38, 0), (39, 1), (41, 0)],\n",
        "                'Vs': [(39, 0), (41, 1), (42, 1)]\n",
        "            },\n",
        "            'Ch': {\n",
        "                'Mi': [(0, 1), (37, 1), (38, 0)],\n",
        "                'Mo': [(37, 0), (38, 1), (39, 0)],\n",
        "                'Se': [(38, 0), (39, 1), (41, 0)],\n",
        "                'Vs': [(39, 0), (41, 1), (42, 1)]\n",
        "            },\n",
        "            'Fa': {\n",
        "                'Mi': [(0, 1), (37, 1), (38, 0)],\n",
        "                'Mo': [(37, 0), (38, 1), (39, 0)],\n",
        "                'Se': [(38, 0), (39, 1), (41, 0)],\n",
        "                'Vs': [(39, 0), (41, 1), (42, 1)]\n",
        "            },\n",
        "            'Fe': {\n",
        "                'Mi': [(0, 1), (37, 1), (38, 0)],\n",
        "                'Mo': [(37, 0), (38, 1), (39, 0)],\n",
        "                'Se': [(38, 0), (39, 1), (41, 0)],\n",
        "                'Vs': [(39, 0), (41, 1), (42, 1)]\n",
        "            },\n",
        "            'Ha': {\n",
        "                'Mi': [(0, 1), (37, 1), (38, 0)],\n",
        "                'Mo': [(37, 0), (38, 1), (39, 0)],\n",
        "                'Se': [(38, 0), (39, 1), (41, 0)],\n",
        "                'Vs': [(39, 0), (41, 1), (42, 1)]\n",
        "            },\n",
        "            'Di': {\n",
        "                'Mi': [(0, 1), (37, 1), (38, 0)],\n",
        "                'Mo': [(37, 0), (38, 1), (39, 0)],\n",
        "                'Se': [(38, 0), (39, 1), (41, 0)],\n",
        "                'Vs': [(39, 0), (41, 1), (42, 1)]\n",
        "            },\n",
        "            'Ma': {\n",
        "                'Mi': [(0, 1), (37, 1), (38, 0)],\n",
        "                'Mo': [(37, 0), (38, 1), (39, 0)],\n",
        "                'Se': [(38, 0), (39, 1), (41, 0)],\n",
        "                'Vs': [(39, 0), (41, 1), (42, 1)]\n",
        "            },\n",
        "            'Mp': {\n",
        "                'Mi': [(0, 1), (37, 1), (38, 0)],\n",
        "                'Mo': [(37, 0), (38, 1), (39, 0)],\n",
        "                'Se': [(38, 0), (39, 1), (41, 0)],\n",
        "                'Vs': [(39, 0), (41, 1), (42, 1)]\n",
        "            },\n",
        "            'Na': {\n",
        "                'Mi': [(0, 1), (37, 1), (38, 0)],\n",
        "                'Mo': [(37, 0), (38, 1), (39, 0)],\n",
        "                'Se': [(38, 0), (39, 1), (41, 0)],\n",
        "                'Vs': [(39, 0), (41, 1), (42, 1)]\n",
        "            },\n",
        "            'Sw': {\n",
        "                'Mi': [(0, 1), (37, 1), (38, 0)],\n",
        "                'Mo': [(37, 0), (38, 1), (39, 0)],\n",
        "                'Se': [(38, 0), (39, 1), (41, 0)],\n",
        "                'Vs': [(39, 0), (41, 1), (42, 1)]\n",
        "            },\n",
        "            'Vo': {\n",
        "                'Mi': [(0, 1), (37, 1), (38, 0)],\n",
        "                'Mo': [(37, 0), (38, 1), (39, 0)],\n",
        "                'Se': [(38, 0), (39, 1), (41, 0)],\n",
        "                'Vs': [(39, 0), (41, 1), (42, 1)]\n",
        "            },\n",
        "        }\n",
        "\n",
        "    def create_line(self, point1, point2):\n",
        "        x1, y1 = point1\n",
        "        x2, y2 = point2\n",
        "        slope = float(y2 - y1) / float(x2 - x1)\n",
        "        bias = y1 - slope * x1\n",
        "        return slope, bias\n",
        "\n",
        "    def get_y_of(self, x, point1, point2):\n",
        "        a, b = self.create_line(point1, point2)\n",
        "        return a * float(x) + b\n",
        "\n",
        "    def get_fuzzy_value(self, parameter, x):\n",
        "        result = {}\n",
        "        for sub_element in self.fuzzy_sets[parameter]:\n",
        "            index = 0\n",
        "            for point in self.fuzzy_sets[parameter][sub_element]:\n",
        "                if (index == 0 and point[1] == 1 and float(x) < point[0]) or (index == 2 and point[1] == 1 and float(x) > point[0]):\n",
        "                    result[sub_element] = 1\n",
        "                    break\n",
        "                if index == 0:\n",
        "                    index += 1\n",
        "                    lastPoint = point\n",
        "                    continue\n",
        "                index += 1\n"
      ],
      "metadata": {
        "id": "An_pYHH3BXCb"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class Fuzzification:\n",
        "    def __init__(self, linguistic_terms):\n",
        "        self.linguistic_terms = linguistic_terms\n",
        "\n",
        "    def fuzzify(self, input_values):\n",
        "        fuzzy_values = {}\n",
        "\n",
        "        for variable, value in input_values.items():\n",
        "            if variable not in self.linguistic_terms:\n",
        "                raise ValueError(f\"No linguistic terms defined for variable: {variable}\")\n",
        "\n",
        "            terms = self.linguistic_terms[variable]\n",
        "            fuzzy_values[variable] = self.map_to_linguistic_terms(value, terms)\n",
        "\n",
        "        return fuzzy_values\n",
        "\n",
        "    def map_to_linguistic_terms(self, value, terms):\n",
        "        fuzzy_mapping = {}\n",
        "\n",
        "        for term, membership_function in terms.items():\n",
        "            membership_degree = membership_function(value)\n",
        "            fuzzy_mapping[term] = membership_degree\n",
        "\n",
        "        return fuzzy_mapping\n",
        "\n",
        "# Example usage:\n",
        "linguistic_terms = {\n",
        "    'Bt': {'Mi': lambda x: max(0, min(1, (x - 0.1) / 0.2))},\n",
        "    'Ch': {'Mi': lambda x: max(0, min(1, (x - 0.1) / 0.2))}\n",
        "    # Add more variables and terms as needed\n",
        "}\n",
        "\n",
        "fuzzifier = Fuzzification(linguistic_terms)\n",
        "\n",
        "# Crisp input values\n",
        "input_values = {'Bt': 0.15, 'Ch': 0.12}\n",
        "\n",
        "# Fuzzify the input values\n",
        "fuzzy_values = fuzzifier.fuzzify(input_values)\n",
        "\n",
        "# Display the fuzzy values\n",
        "print(f\"Fuzzy Values: {fuzzy_values}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sgtR_dUE07V2",
        "outputId": "67eab724-c8cf-49b2-c05a-107d77a19600"
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fuzzy Values: {'Bt': {'Mi': 0.24999999999999994}, 'Ch': {'Mi': 0.09999999999999995}}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class Rule:\n",
        "    def __init__(self, antecedents, consequent):\n",
        "        self.antecedents = antecedents\n",
        "        self.consequent = consequent\n",
        "\n",
        "    def evaluate(self, inputs):\n",
        "        min_membership = min(inputs[variable][term] for variable, term in self.antecedents.items())\n",
        "        return {self.consequent: min_membership}\n"
      ],
      "metadata": {
        "id": "7RrDtKbi1GHn"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class Inference:\n",
        "    def __init__(self, rules):\n",
        "        self.rules = rules\n",
        "\n",
        "    def infer(self, fuzzy_inputs):\n",
        "        output = {}\n",
        "        for rule in self.rules:\n",
        "            result = rule.evaluate(fuzzy_inputs)\n",
        "            for variable, value in result.items():\n",
        "                if variable in output:\n",
        "                    output[variable] = max(output[variable], value)\n",
        "                else:\n",
        "                    output[variable] = value\n",
        "        return output\n"
      ],
      "metadata": {
        "id": "pCVyA7Dk1K4x"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class Defuzzification:\n",
        "    def __init__(self, output_variable, terms):\n",
        "        self.output_variable = output_variable\n",
        "        self.terms = terms\n",
        "\n",
        "    def defuzzify(self, fuzzy_output):\n",
        "        centroid_values = []\n",
        "        for term, membership_value in fuzzy_output.items():\n",
        "            if term in self.terms:\n",
        "                centroid = self.calculate_centroid_of_membership_function(term)\n",
        "                centroid_values.append(centroid * membership_value)\n",
        "\n",
        "        total_area = sum(fuzzy_output.values())\n",
        "        crisp_value = sum(centroid_values) / total_area if total_area != 0 else 0\n",
        "\n",
        "        return crisp_value\n",
        "\n",
        "    def calculate_centroid_of_membership_function(self, term):\n",
        "        # Updated method to handle different formats\n",
        "        if '(' in term and ')' in term:\n",
        "            # Extract the value inside parentheses\n",
        "            value = term.split('(')[1].split(')')[0]\n",
        "            return float(value)\n",
        "        else:\n",
        "            # Handle other formats as needed\n",
        "            return 0  # Update this based on your actual membership function format\n",
        "\n",
        "# Example usage:\n",
        "\n",
        "# Sample fuzzy output from the inference\n",
        "fuzzy_output = {\"Risk\": 0.8, \"No Risk\": 0.2}\n",
        "\n",
        "# Example membership functions for the output variable\n",
        "output_terms = {\"Risk\", \"No Risk\"}\n",
        "\n",
        "output_defuzzification = Defuzzification(\"Risk\", output_terms)\n",
        "\n",
        "# Defuzzify the output values\n",
        "crisp_value = output_defuzzification.defuzzify(fuzzy_output)\n",
        "\n",
        "# Display the crisp value\n",
        "print(\"Crisp Value:\", crisp_value)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ezxTeleT18QS",
        "outputId": "16bf6603-ef58-4565-e53e-1aaca39c12e1"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Crisp Value: 0.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "class Fuzzification:\n",
        "    def __init__(self, linguistic_terms):\n",
        "        self.linguistic_terms = linguistic_terms\n",
        "\n",
        "    def fuzzify(self, input_values):\n",
        "        fuzzy_values = {}\n",
        "\n",
        "        for variable, value in input_values.items():\n",
        "            if variable not in self.linguistic_terms:\n",
        "                raise ValueError(f\"No linguistic terms defined for variable: {variable}\")\n",
        "\n",
        "            terms = self.linguistic_terms[variable]\n",
        "            fuzzy_values[variable] = self.map_to_linguistic_terms(value, terms)\n",
        "\n",
        "        return fuzzy_values\n",
        "\n",
        "    def map_to_linguistic_terms(self, value, terms):\n",
        "        fuzzy_mapping = {}\n",
        "\n",
        "        for term, membership_function in terms.items():\n",
        "            membership_degree = membership_function(value)\n",
        "            fuzzy_mapping[term] = membership_degree\n",
        "\n",
        "        return fuzzy_mapping\n",
        "\n",
        "# Define linguistic terms for symptoms\n",
        "linguistic_terms = {\n",
        "    'BodyTemperature': {'Mild': lambda x: max(0, min(1, x / 98.6)),\n",
        "                        'Moderate': lambda x: max(0, min(1, (x - 98.6) / 1)),\n",
        "                        'Severe': lambda x: max(0, min(1, (x - 99.6) / 1))},\n",
        "    'Chills': {'Mild': lambda x: max(0, min(1, x / 0.3)),\n",
        "               'Moderate': lambda x: max(0, min(1, (x - 0.3) / 0.3)),\n",
        "               'Severe': lambda x: max(0, min(1, (x - 0.6) / 0.3))},\n",
        "    'Fatigue': {'Mild': lambda x: max(0, min(1, x / 0.9)),\n",
        "                'Moderate': lambda x: max(0, min(1, (x - 0.9) / 0.3)),\n",
        "                'Severe': lambda x: max(0, min(1, (x - 1.2) / 0.3))},\n",
        "    'Headache': {'Mild': lambda x: max(0, min(1, x / 0.9)),\n",
        "                 'Moderate': lambda x: max(0, min(1, (x - 0.9) / 0.3)),\n",
        "                 'Severe': lambda x: max(0, min(1, (x - 1.2) / 0.3))},\n",
        "    'Diarrhea': {'Mild': lambda x: max(0, min(1, x / 0.4)),\n",
        "                 'Moderate': lambda x: max(0, min(1, (x - 0.4) / 0.3)),\n",
        "                 'Severe': lambda x: max(0, min(1, (x - 0.7) / 0.3))},\n",
        "    'Malaise': {'Mild': lambda x: max(0, min(1, x / 0.4)),\n",
        "                'Moderate': lambda x: max(0, min(1, (x - 0.4) / 0.3)),\n",
        "                'Severe': lambda x: max(0, min(1, (x - 0.7) / 0.3))},\n",
        "    'MuscularPain': {'Mild': lambda x: max(0, min(1, x / 0.6)),\n",
        "                     'Moderate': lambda x: max(0, min(1, (x - 0.6) / 0.3)),\n",
        "                     'Severe': lambda x: max(0, min(1, (x - 0.9) / 0.3))},\n",
        "    'Nausea': {'Mild': lambda x: max(0, min(1, x / 0.4)),\n",
        "               'Moderate': lambda x: max(0, min(1, (x - 0.4) / 0.3)),\n",
        "               'Severe': lambda x: max(0, min(1, (x - 0.7) / 0.3))},\n",
        "    'Sweating': {'Mild': lambda x: max(0, min(1, x / 0.4)),\n",
        "                 'Moderate': lambda x: max(0, min(1, (x - 0.4) / 0.3)),\n",
        "                 'Severe': lambda x: max(0, min(1, (x - 0.7) / 0.3))},\n",
        "    'Vomiting': {'Mild': lambda x: max(0, min(1, x / 0.6)),\n",
        "                 'Moderate': lambda x: max(0, min(1, (x - 0.6) / 0.3)),\n",
        "                 'Severe': lambda x: max(0, min(1, (x - 0.9) / 0.3))}\n",
        "    # Add more symptoms as needed\n",
        "}\n",
        "\n",
        "# Create an instance of Fuzzification\n",
        "fuzzifier = Fuzzification(linguistic_terms)\n",
        "\n",
        "# Crisp input values for symptoms\n",
        "symptom_values = {'BodyTemperature': 99.8, 'Chills': 0.4, 'Fatigue': 1.2, 'Headache': 1.0,\n",
        "                  'Diarrhea': 0.6, 'Malaise': 0.8, 'MuscularPain': 0.9, 'Nausea': 0.7,\n",
        "                  'Sweating': 0.6, 'Vomiting': 0.8}\n",
        "\n",
        "# Fuzzify the input values for symptoms\n",
        "fuzzy_symptoms = fuzzifier.fuzzify(symptom_values)\n",
        "\n",
        "# Display the fuzzy values for symptoms\n",
        "print(\"Fuzzy Values for Symptoms:\")\n",
        "for symptom, values in fuzzy_symptoms.items():\n",
        "    print(f\"{symptom}: {values}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "H2I56ZLm2lFu",
        "outputId": "625998aa-8ed2-4603-a073-e2b7b0eb6fa1"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Fuzzy Values for Symptoms:\n",
            "BodyTemperature: {'Mild': 1, 'Moderate': 1, 'Severe': 0.20000000000000284}\n",
            "Chills: {'Mild': 1, 'Moderate': 0.3333333333333335, 'Severe': 0}\n",
            "Fatigue: {'Mild': 1, 'Moderate': 0.9999999999999998, 'Severe': 0}\n",
            "Headache: {'Mild': 1, 'Moderate': 0.33333333333333326, 'Severe': 0}\n",
            "Diarrhea: {'Mild': 1, 'Moderate': 0.6666666666666665, 'Severe': 0}\n",
            "Malaise: {'Mild': 1, 'Moderate': 1, 'Severe': 0.33333333333333365}\n",
            "MuscularPain: {'Mild': 1, 'Moderate': 1, 'Severe': 0}\n",
            "Nausea: {'Mild': 1, 'Moderate': 0.9999999999999998, 'Severe': 0}\n",
            "Sweating: {'Mild': 1, 'Moderate': 0.6666666666666665, 'Severe': 0}\n",
            "Vomiting: {'Mild': 1, 'Moderate': 0.666666666666667, 'Severe': 0}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class Fuzzification:\n",
        "    def __init__(self, linguistic_terms):\n",
        "        self.linguistic_terms = linguistic_terms\n",
        "\n",
        "    def fuzzify(self, input_values):\n",
        "        fuzzy_values = {}\n",
        "\n",
        "        for variable, value in input_values.items():\n",
        "            if variable not in self.linguistic_terms:\n",
        "                raise ValueError(f\"No linguistic terms defined for variable: {variable}\")\n",
        "\n",
        "            terms = self.linguistic_terms[variable]\n",
        "            fuzzy_values[variable] = self.map_to_linguistic_terms(value, terms)\n",
        "\n",
        "        return fuzzy_values\n",
        "\n",
        "    def map_to_linguistic_terms(self, value, terms):\n",
        "        fuzzy_mapping = {}\n",
        "\n",
        "        for term, membership_function in terms.items():\n",
        "            membership_degree = membership_function(value)\n",
        "            fuzzy_mapping[term] = membership_degree\n",
        "\n",
        "        return fuzzy_mapping\n",
        "\n",
        "\n",
        "class Inference:\n",
        "    def __init__(self, rules):\n",
        "        self.rules = rules\n",
        "\n",
        "    def infer(self, fuzzy_inputs):\n",
        "        output = {}\n",
        "        for rule in self.rules:\n",
        "            result = rule.evaluate(fuzzy_inputs)\n",
        "            for variable, value in result.items():\n",
        "                if variable in output:\n",
        "                    output[variable] = max(output[variable], value)\n",
        "                else:\n",
        "                    output[variable] = value\n",
        "        return output\n",
        "\n",
        "\n",
        "class Rule:\n",
        "    def __init__(self, antecedents, consequent):\n",
        "        self.antecedents = antecedents\n",
        "        self.consequent = consequent\n",
        "\n",
        "    def evaluate(self, inputs):\n",
        "        min_membership = min(inputs[variable][term] for variable, term in self.antecedents.items())\n",
        "        return {self.consequent: min_membership}\n",
        "\n",
        "\n",
        "class Defuzzification:\n",
        "    def __init__(self, output_variable, terms):\n",
        "        self.output_variable = output_variable\n",
        "        self.terms = terms\n",
        "\n",
        "    def defuzzify(self, fuzzy_output):\n",
        "        centroid_values = []\n",
        "        for term, membership_value in fuzzy_output.items():\n",
        "            if term in self.terms:\n",
        "                centroid = self.calculate_centroid_of_membership_function(term)\n",
        "                centroid_values.append(centroid * membership_value)\n",
        "\n",
        "        total_area = sum(fuzzy_output.values())\n",
        "        crisp_value = sum(centroid_values) / total_area if total_area != 0 else 0\n",
        "\n",
        "        return crisp_value\n",
        "\n",
        "    def calculate_centroid_of_membership_function(self, term):\n",
        "        # For simplicity, this example assumes a linear function\n",
        "        # Adjust this function based on the actual shape of your membership functions\n",
        "        split_values = term.split('(')[1].split(')')[0].split(',')\n",
        "\n",
        "        if len(split_values) == 1:\n",
        "            return float(split_values[0])\n",
        "        elif len(split_values) == 2:\n",
        "            return (float(split_values[0]) + float(split_values[1])) / 2\n",
        "        else:\n",
        "            raise ValueError(f\"Invalid format for membership function: {term}\")\n",
        "\n",
        "\n",
        "\n",
        "# Define linguistic terms for symptoms\n",
        "linguistic_terms = {\n",
        "    'Fe': {'Mi': lambda x: max(0, min(1, (x - 0.1) / 0.2)),\n",
        "           'Mo': lambda x: max(0, min(1, (x - 0.2) / 0.2)),\n",
        "           'Se': lambda x: max(0, min(1, (x - 0.3) / 0.2))},\n",
        "    'Sw': {'Mi': lambda x: max(0, min(1, (x - 0.1) / 0.2)),\n",
        "           'Mo': lambda x: max(0, min(1, (x - 0.2) / 0.2)),\n",
        "           'Se': lambda x: max(0, min(1, (x - 0.3) / 0.2))},\n",
        "    'Ch': {'Mi': lambda x: max(0, min(1, (x - 0.1) / 0.2)),\n",
        "           'Mo': lambda x: max(0, min(1, (x - 0.2) / 0.2)),\n",
        "           'Se': lambda x: max(0, min(1, (x - 0.3) / 0.2))},\n",
        "    'Ha': {'Mi': lambda x: max(0, min(1, (x - 0.1) / 0.2)),\n",
        "           'Mo': lambda x: max(0, min(1, (x - 0.2) / 0.2)),\n",
        "           'Se': lambda x: max(0, min(1, (x - 0.3) / 0.2))},\n",
        "    'Ma': {'Mi': lambda x: max(0, min(1, (x - 0.1) / 0.2)),\n",
        "           'Mo': lambda x: max(0, min(1, (x - 0.2) / 0.2)),\n",
        "           'Se': lambda x: max(0, min(1, (x - 0.3) / 0.2))},\n",
        "    'Fa': {'Mi': lambda x: max(0, min(1, (x - 0.1) / 0.2)),\n",
        "           'Mo': lambda x: max(0, min(1, (x - 0.2) / 0.2)),\n",
        "           'Se': lambda x: max(0, min(1, (x - 0.3) / 0.2))},\n",
        "    'BT': {'Mi': lambda x: max(0, min(1, (x - 37) / 1)),\n",
        "           'Mo': lambda x: max(0, min(1, (x - 38) / 1)),\n",
        "           'Se': lambda x: max(0, min(1, (x - 39) / 1))},\n",
        "    'Na': {'Mi': lambda x: max(0, min(1, (x - 0.1) / 0.2)),\n",
        "           'Mo': lambda x: max(0, min(1, (x - 0.2) / 0.2)),\n",
        "           'Se': lambda x: max(0, min(1, (x - 0.3) / 0.2))},\n",
        "    'Mp': {'Mi': lambda x: max(0, min(1, (x - 0.1) / 0.2)),\n",
        "           'Mo': lambda x: max(0, min(1, (x - 0.2) / 0.2)),\n",
        "           'Se': lambda x: max(0, min(1, (x - 0.3) / 0.2))},\n",
        "    'Vo': {'Mi': lambda x: max(0, min(1, (x - 0.1) / 0.2)),\n",
        "           'Mo': lambda x: max(0, min(1, (x - 0.2) / 0.2)),\n",
        "           'Se': lambda x: max(0, min(1, (x - 0.3) / 0.2))},\n",
        "    'Di': {'Mi': lambda x: max(0, min(1, (x - 0.1) / 0.2)),\n",
        "           'Mo': lambda x: max(0, min(1, (x - 0.2) / 0.2)),\n",
        "           'Se': lambda x: max(0, min(1, (x - 0.3) / 0.2))},\n",
        "}\n",
        "\n",
        "# Define rules for inference\n",
        "rules = [\n",
        "    Rule({'BT': 'Se', 'Ch': 'Se', 'Fa': 'Se', 'Fe': 'Se', 'Ha': 'Se', 'Di': 'Se', 'Ma': 'Se', 'Mp': 'Se', 'Na': 'Se', 'Sw': 'Se', 'Vo': 'Se'},\n",
        "         'Malaria'),\n",
        "    Rule({'BT': 'Se', 'Ch': 'Se', 'Fa': 'Se', 'Fe': 'Se', 'Ha': 'Se', 'Di': 'Se', 'Ma': 'Se', 'Mp': 'Se', 'Na': 'Se', 'Sw': 'Se', 'Vo': 'Se'},\n",
        "         'Malaria'),\n",
        "    # Add more rules as needed\n",
        "]\n",
        "\n",
        "# Define the output variable and terms for defuzzification\n",
        "output_variable = 'Diagnosis'\n",
        "output_terms = {'Malaria'}\n",
        "\n",
        "# Instantiate the classes\n",
        "fuzzifier = Fuzzification(linguistic_terms)\n",
        "inference_engine = Inference(rules)\n",
        "defuzzifier = Defuzzification(output_variable, output_terms)\n",
        "\n",
        "# Example usage:\n",
        "# Crisp input values\n",
        "input_values = {'BT': 38.5, 'Ch': 0.3, 'Fa': 0.8, 'Fe': 0.3, 'Ha': 0.9, 'Di': 0.4, 'Ma': 0.4, 'Mp': 0.6, 'Na': 0.4, 'Sw': 0.4, 'Vo': 0.6}\n",
        "\n",
        "# Fuzzify the input values\n",
        "fuzzy_inputs = fuzzifier.fuzzify(input_values)\n",
        "\n",
        "# Perform inference\n",
        "inference_result = inference_engine.infer(fuzzy_inputs)\n",
        "\n",
        "# Defuzzify the output values\n",
        "diagnosis = defuzzifier.defuzzify(inference_result)\n",
        "\n",
        "# Display the results\n",
        "print(\"Fuzzy Inputs:\", fuzzy_inputs)\n",
        "print(\"Inference Result:\", inference_result)\n",
        "print(\"Diagnosis:\", diagnosis)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 390
        },
        "id": "8mP0jG4w3LOZ",
        "outputId": "569740e7-6e4f-400c-f4cd-731e497fcb5c"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "error",
          "ename": "IndexError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-22-7b0aaee97100>\u001b[0m in \u001b[0;36m<cell line: 150>\u001b[0;34m()\u001b[0m\n\u001b[1;32m    148\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m \u001b[0;31m# Defuzzify the output values\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m \u001b[0mdiagnosis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdefuzzifier\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdefuzzify\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minference_result\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m \u001b[0;31m# Display the results\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-22-7b0aaee97100>\u001b[0m in \u001b[0;36mdefuzzify\u001b[0;34m(self, fuzzy_output)\u001b[0m\n\u001b[1;32m     60\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mterm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmembership_value\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mfuzzy_output\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     61\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mterm\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mterms\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 62\u001b[0;31m                 \u001b[0mcentroid\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcalculate_centroid_of_membership_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mterm\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     63\u001b[0m                 \u001b[0mcentroid_values\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcentroid\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mmembership_value\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-22-7b0aaee97100>\u001b[0m in \u001b[0;36mcalculate_centroid_of_membership_function\u001b[0;34m(self, term)\u001b[0m\n\u001b[1;32m     71\u001b[0m         \u001b[0;31m# For simplicity, this example assumes a linear function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m         \u001b[0;31m# Adjust this function based on the actual shape of your membership functions\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 73\u001b[0;31m         \u001b[0msplit_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mterm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'('\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m')'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m','\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     74\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     75\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msplit_values\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mIndexError\u001b[0m: list index out of range"
          ]
        }
      ]
    }
  ]
}